{"version":3,"sources":["api.js","App.js","index.js"],"names":["movieApi","axios","create","baseURL","movieApiRequests","getMovies","page","get","params","limit","GlobalStyle","createGlobalStyle","reset","Header","styled","header","useClientRect","loading","useState","rect","setRect","useCallback","node","getBoundingClientRect","useScrolledOffset","window","scrollY","innerHeight","offsetY","setOffsetY","useEffect","scrollHandler","addEventListener","removeEventListener","App","movieDatas","setMovieDatas","fetchedMovieDatas","setFetchedMovieDatags","movieDataPageNum","setMovieDataPageNum","setLoading","error","setError","windowHeight","setWindowHeight","contentSmallThanWindow","setContentSmallThanWindow","ref","fetchMoviDatas","a","data","movies","concat","windowResizeHandler","console","log","height","map","movie","idx","key","title","ReactDOM","render","document","getElementById"],"mappings":"qPAEMA,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAS,0BAGEC,EAAmB,CAC9BC,UAAW,eAACC,EAAD,uDAAQ,EAAR,OAAcN,EAASO,IAAI,oBAAqB,CAAEC,OAAQ,CAAEF,OAAMG,MAAO,Q,4hBCFtF,IAAMC,EAAcC,4BAAH,IACbC,KAKEC,EAASC,UAAOC,OAAV,KASNC,EAAgB,SAAAC,GAAY,IAAD,EACPC,mBAAS,MADF,mBACxBC,EADwB,KAClBC,EADkB,KAU/B,MAAO,CAACD,EARIE,uBACV,SAAAC,GACe,OAATA,GACFF,EAAQE,EAAKC,2BAGjB,CAACN,MAKCO,EAAoB,WAAO,IAAD,EACAN,mBAASO,OAAOC,QAAUD,OAAOE,aADjC,mBACvBC,EADuB,KACdC,EADc,KAS9B,OAPAC,qBAAU,WACR,IAAMC,EAAgB,WACpBF,EAAWJ,OAAOC,QAAUD,OAAOE,cAGrC,OADAF,OAAOO,iBAAiB,SAAUD,GAC3B,kBAAMN,OAAOQ,oBAAoB,SAAUF,MACjD,IACIH,GAmGMM,MAhGf,WAAgB,IAAD,EACuBhB,mBAAS,IADhC,mBACNiB,EADM,KACMC,EADN,OAEsClB,mBAAS,MAF/C,mBAENmB,EAFM,KAEaC,EAFb,OAGmCpB,mBAAS,GAH5C,mBAGNqB,EAHM,KAGYC,EAHZ,OAIiBtB,oBAAS,GAJ1B,mBAIND,EAJM,KAIGwB,EAJH,OAKavB,mBAAS,MALtB,mBAKNwB,EALM,KAKCC,EALD,OAM2BzB,mBAASO,OAAOE,aAN3C,mBAMNiB,EANM,KAMQC,EANR,OAO+C3B,mBAAS,MAPxD,mBAON4B,EAPM,KAOkBC,EAPlB,OAQO/B,EAAcC,GARrB,mBAQNE,EARM,KAQA6B,EARA,KASPpB,EAAUJ,IACVyB,EAAc,uCAAG,WAAM3C,GAAN,iBAAA4C,EAAA,+EAMT9C,EAAiBC,UAAUC,GANlB,gBAIC+B,EAJD,EAGjBc,KACEA,KAAQC,OAGZd,EAAsBD,GAPH,gDASnBM,EAAS,gCATU,yBAWnBF,GAAW,GAXQ,4EAAH,sDA8DpB,OA/CAX,qBAAU,WACRmB,EAAeV,KACd,CAACA,IAEJT,qBAAU,WACkB,OAAtBO,GACFD,EAAcD,EAAWkB,OAAOhB,MAEjC,CAACA,IAEJP,qBAAU,WACR,IAAMwB,EAAsB,WAC1BT,EAAgBpB,OAAOE,cAGzB,OADAF,OAAOO,iBAAiB,SAAUsB,GAC3B,kBAAM7B,OAAOQ,oBAAoB,SAAWqB,MAClD,IAEHxB,qBAAU,WACJb,GAGS,OAATE,GAAkBF,GAChB6B,IACFN,EAAoBD,EAAmB,GACvCgB,QAAQC,IAAI,oBAAqBjB,MAGpC,CAACO,EAAwB3B,IAE5BW,qBAAU,WACK,OAATX,GAAkBF,IACpB8B,EAA0B5B,EAAKsC,QAAUb,GACzCW,QAAQC,IAAIV,MAEb,CAACF,EAAczB,IAElBW,qBAAU,WACK,OAATX,GAGAS,GAAWT,EAAKsC,SAAWxC,IAC7BuB,EAAoBD,EAAmB,GACvCgB,QAAQC,IAAI5B,MAEb,CAACA,IAGF,oCACE,kBAAClB,EAAD,MACA,yBAAKsC,IAAKA,GACR,kBAACnC,EAAD,KACY,OAATM,GAAiB,mFAAkBA,EAAKsC,OAAvB,OAClB,gDAAkB7B,EAAlB,OACkB,OAAjBgB,GAAyB,2DAA6BA,EAA7B,OAC1B,sDAAwB3B,EAAU,eAAiB,QAEpDyB,EACC,8BAAOA,GAEP,6BACGP,EAAWuB,KAAI,SAACC,EAAOC,GAAR,OACd,yBAAKC,IAAKD,GAAMD,EAAMG,cChIpCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.52ffc012.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst movieApi = axios.create({\n  baseURL: \"https://yts.lt/api/v2\"\n})\n\nexport const movieApiRequests = {\n  getMovies: (page = 1) => movieApi.get(\"/list_movies.json\", { params: { page, limit: 20 } })\n}\n","import React, { useState, useEffect, useCallback } from \"react\"\nimport { movieApiRequests } from \"./api\"\nimport styled, { createGlobalStyle } from \"styled-components\"\nimport reset from \"styled-reset\"\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n  @import url('https://fonts.googleapis.com/css?family=Do+Hyeon&display=swap&subset=korean');\n  font-family: 'Do Hyeon', sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n`\n\nconst Header = styled.header`\n  position: sticky;\n  top: 0;\n  left: 0;\n  background-color: black;\n  color: white;\n  padding: 1rem;\n`\n\nconst useClientRect = loading => {\n  const [rect, setRect] = useState(null)\n  const ref = useCallback(\n    node => {\n      if (node !== null) {\n        setRect(node.getBoundingClientRect())\n      }\n    },\n    [loading]\n  )\n  return [rect, ref]\n}\n\nconst useScrolledOffset = () => {\n  const [offsetY, setOffsetY] = useState(window.scrollY + window.innerHeight)\n  useEffect(() => {\n    const scrollHandler = () => {\n      setOffsetY(window.scrollY + window.innerHeight)\n    }\n    window.addEventListener(\"scroll\", scrollHandler)\n    return () => window.removeEventListener(\"scroll\", scrollHandler)\n  }, [])\n  return offsetY\n}\n\nfunction App() {\n  const [movieDatas, setMovieDatas] = useState([])\n  const [fetchedMovieDatas, setFetchedMovieDatags] = useState(null)\n  const [movieDataPageNum, setMovieDataPageNum] = useState(1)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight)\n  const [contentSmallThanWindow, setContentSmallThanWindow] = useState(null)\n  const [rect, ref] = useClientRect(loading)\n  const offsetY = useScrolledOffset()\n  const fetchMoviDatas = async page => {\n    try {\n      const {\n        data: {\n          data: { movies: fetchedMovieDatas }\n        }\n      } = await movieApiRequests.getMovies(page)\n      setFetchedMovieDatags(fetchedMovieDatas)\n    } catch {\n      setError(\"Error: Can't get movie datas\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchMoviDatas(movieDataPageNum)\n  }, [movieDataPageNum])\n\n  useEffect(() => {\n    if (fetchedMovieDatas !== null) {\n      setMovieDatas(movieDatas.concat(fetchedMovieDatas))\n    }\n  }, [fetchedMovieDatas])\n\n  useEffect(() => {\n    const windowResizeHandler = () => {\n      setWindowHeight(window.innerHeight)\n    }\n    window.addEventListener(\"resize\", windowResizeHandler)\n    return () => window.removeEventListener(\"resize\" > windowResizeHandler)\n  }, [])\n\n  useEffect(() => {\n    if (loading) {\n      return\n    }\n    if (rect !== null && !loading) {\n      if (contentSmallThanWindow) {\n        setMovieDataPageNum(movieDataPageNum + 1)\n        console.log(\"movieDataPageNum:\", movieDataPageNum)\n      }\n    }\n  }, [contentSmallThanWindow, rect])\n\n  useEffect(() => {\n    if (rect !== null && !loading) {\n      setContentSmallThanWindow(rect.height <= windowHeight)\n      console.log(contentSmallThanWindow)\n    }\n  }, [windowHeight, rect])\n\n  useEffect(() => {\n    if (rect === null) {\n      return\n    }\n    if (offsetY >= rect.height && !loading) {\n      setMovieDataPageNum(movieDataPageNum + 1)\n      console.log(offsetY)\n    }\n  }, [offsetY])\n\n  return (\n    <>\n      <GlobalStyle />\n      <div ref={ref}>\n        <Header>\n          {rect !== null && <div>{`컨텐츠의 길이는 ${rect.height}px`}</div>}\n          <div>{`OffsetY: ${offsetY}px`}</div>\n          {windowHeight !== null && <div>{`window.innerHeight: ${windowHeight}px`}</div>}\n          <div>{`Data Fetching: ${loading ? \"Fetching....\" : \"No\"}`}</div>\n        </Header>\n        {error ? (\n          <span>{error}</span>\n        ) : (\n          <div>\n            {movieDatas.map((movie, idx) => (\n              <div key={idx}>{movie.title}</div>\n            ))}\n          </div>\n        )}\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}